{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortFieldType","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","readyGoods","goods","reverse","preparedGoods","sort","good1","good2","sortAlphabetically","localeCompare","sortByLength","length","getPreparedGoods","isResetNeeded","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAqBYA,E,0EAfCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAKUD,K,wCAAAA,E,4BAAAA,E,+BAAAA,M,KAmCL,IAAME,EAAgB,WAC3B,MAAkCC,mBAAiB,IAAnD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAkB,GAAtD,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKJ,EAAce,mBACjB,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAciB,aACjB,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXR,GACFC,EAAcD,UAGTC,EAOLQ,CACAlB,EACAG,EACAE,GAaIc,EAAiBhB,GAAaE,EAEpC,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYnB,IAAcJ,EAAce,qBAG9CS,QAvBN,kBAAMnB,EAAaL,EAAce,qBAc7B,iCAcA,wBACEO,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYnB,IAAcJ,EAAciB,eAG9CO,QAnCmB,kBAAMnB,EAAaL,EAAciB,eA0BtD,4BAcA,wBACEK,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAA2B,IAAfjB,IAGlBkB,QAhDc,kBAAMjB,GAAeD,IAuCrC,qBAcCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAxDU,WAClBnB,EAAa,IACbE,GAAc,IAmDR,sBAWJ,6BACGC,EAAWiB,KAAI,SAAAC,GAAI,OAClB,oBAAI,UAAQ,OAAZ,SACGA,aCvIbC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.521ece89.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport React, { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype goodsList = string[];\n\nexport enum SortFieldType {\n  sortAlphabetically = 'sortAlphabetically',\n  sortByLength = 'sortByLength',\n  sortByDefault = 'sortByDefault',\n}\n\nfunction getPreparedGoods(\n  goods: goodsList,\n  sortField: SortFieldType,\n  reverse: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortFieldType.sortAlphabetically:\n          return good1.localeCompare(good2);\n\n        case SortFieldType.sortByLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<string>('');\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const readyGoods\n  = getPreparedGoods(\n    goodsFromServer,\n    sortField as SortFieldType,\n    isReversed,\n  );\n\n  const handleSortAlphabetically\n  = () => setSortField(SortFieldType.sortAlphabetically);\n\n  const handleSortByLength = () => setSortField(SortFieldType.sortByLength);\n  const handleReverse = () => setIsReversed(!isReversed);\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  const isResetNeeded = (sortField || isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortField !== SortFieldType.sortAlphabetically },\n            )\n          }\n          onClick={handleSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortField !== SortFieldType.sortByLength },\n            )\n          }\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': isReversed === false },\n            )\n          }\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {isResetNeeded && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {readyGoods.map(good => (\n          <li data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}